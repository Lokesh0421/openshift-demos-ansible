---
# deploy stage
- name: deploy coolstore in {{ project_stage }}
  shell: "{{ openshift_cli }} process -f {{ deployments_template }} --param=APP_VERSION=test --param=HOSTNAME_SUFFIX={{ project_stage }}.{{ hostname_suffix }} -n {{ project_stage }} | {{ openshift_cli }} create -f - -n {{ project_stage }}"
  ignore_errors: true

- name: prune deployments in {{ project_stage }}
  shell: "{{ openshift_cli }} delete dc,svc,route,pvc,cm -l {{ prune_deployments_selector_stage }} -n {{ project_stage }}"
  ignore_errors: true
  when: >
    prune_deployments_selector_stage is defined and 
    prune_deployments_selector_stage is not none and 
    prune_deployments_selector_stage|trim() != ""

# remove persistent storage in stage
- name: list deployment configs in {{ project_stage }}
  shell: "{{ openshift_cli }} get dc -o json -n {{ project_stage }}"
  register: deploymentconfigs_list

- name: delete pvc and dc volumes in {{ project_stage }}
  shell: |
    {{ openshift_cli }} volumes dc/{{ item.0.metadata.name }} --name={{ item.1.name }} --add -t emptyDir --overwrite -n {{ project_stage }}
    {{ openshift_cli }} delete pvc {{ item.1.persistentVolumeClaim.claimName }} -n {{ project_stage }}
  with_subelements: 
    - "{{ deploymentconfigs_list.stdout|from_json|json_query('items[?spec.template.spec.volumes]') }}"
    - spec.template.spec.volumes
  when: >
    ephemeral and 
    item.1.persistentVolumeClaim is defined and 
    item.1.persistentVolumeClaim is not none and 
    item.1.persistentVolumeClaim|trim() != ""

- name: list deployment configs that use database in {{ project_stage }}
  shell: "{{ openshift_cli }} get dc -l uses-database=true -o json -n {{ project_stage }}"
  register: deploymentconfigs_with_database_list

- name: restart deployments that use database to re-init databases in {{ project_stage }}
  shell: "{{ openshift_cli }} rollout latest dc/{{ item.metadata.name }} -n {{ project_stage }}"
  with_items: "{{ deploymentconfigs_with_database_list.stdout|from_json|json_query('items') }}"
  when: ephemeral
